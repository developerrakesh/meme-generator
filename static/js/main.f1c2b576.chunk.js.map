{"version":3,"sources":["images/Trollface.png","components/Header.js","components/MemeGenerator.js","App.js","reportWebVitals.js","index.js"],"names":["Header","src","trollFace","alt","React","Component","MemeGenerator","handleChange","evt","target","name","value","setState","handleSubmit","preventDefault","randomNum","Math","floor","random","arrLength","prev","randImg","state","allMemeImgs","url","topTxt","bottomTxt","bind","a","fetch","response","json","obj","memes","data","length","console","log","getData","className","onSubmit","this","type","onChange","placeholder","isLoading","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2NAAe,MAA0B,sC,OCc1BA,E,4JAVX,WACI,OACI,mCACI,qBAAKC,IAAKC,EAAWC,IAAI,eACzB,sD,GALKC,IAAMC,W,uCCgEZC,E,kDAhEX,aAAe,IAAD,8BACV,gBA8BJC,aAAe,SAAAC,GACX,MAAwBA,EAAIC,OAApBC,EAAR,EAAQA,KAAMC,EAAd,EAAcA,MACd,EAAKC,SAAL,eAAkBF,EAASC,KAjCjB,EAoCdE,aAAe,SAAAL,GACXA,EAAIM,iBACJ,EAAKC,UAAYC,KAAKC,MAAMD,KAAKE,SAAS,EAAKC,WAC/C,EAAKP,UAAS,SAAAQ,GACV,MAAO,CACHC,QAAS,EAAKC,MAAMC,YAAY,EAAKR,WAAWS,SAvCxD,EAAKF,MAAQ,CACTG,OAAQ,GACRC,UAAW,GACXL,QAAS,gCACTE,YAAa,IAEjB,EAAKV,aAAe,EAAKA,aAAac,KAAlB,gBACpB,EAAKR,UAAY,KACjB,EAAKJ,UAAY,KAVP,E,qDAad,WAAqB,IAAD,QACH,uCAAG,gCAAAa,EAAA,+EAEeC,MAAM,qCAFrB,cAEFC,EAFE,gBAGUA,EAASC,OAHnB,OAGFC,EAHE,OAIAC,EAAUD,EAAIE,KAAdD,MACR,EAAKrB,SAAS,CACVW,YAAaU,IAEjB,EAAKd,UAAY,EAAKG,MAAMC,YAAYY,OAAS,EARzC,kDAURC,QAAQC,IAAI,UAAZ,MAVQ,0DAAH,qDAcbC,K,oBAkBJ,WACI,OACI,gCACI,uBAAMC,UAAU,YAAYC,SAAUC,KAAK5B,aAA3C,UACI,uBAAO6B,KAAK,OAAOhC,KAAK,SAASC,MAAO8B,KAAKnB,MAAMG,OAAQkB,SAAUF,KAAKlC,aAAcqC,YAAY,aACpG,uBAAOF,KAAK,OAAOhC,KAAK,YAAYC,MAAO8B,KAAKnB,MAAMI,UAAWiB,SAAUF,KAAKlC,aAAcqC,YAAY,gBAC1G,4CAEJ,sBAAKL,UAAU,OAAf,UACKE,KAAKnB,MAAMuB,UAAY,2CAAoB,qBAAK5C,IAAKwC,KAAKnB,MAAMD,QAASlB,IAAI,WAC9E,oBAAIoC,UAAU,MAAd,SAAqBE,KAAKnB,MAAMG,SAChC,oBAAIc,UAAU,SAAd,SAAwBE,KAAKnB,MAAMI,sB,GA1D3BtB,IAAMC,WCWjByC,MATjB,WACI,OACI,qCACI,cAAC,EAAD,IACA,cAAC,EAAD,QCIGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.f1c2b576.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/Trollface.c371feba.png\";","import React from \"react\";\r\nimport trollFace from \"../images/Trollface.png\";\r\n\r\nclass Header extends React.Component {\r\n    render() {\r\n        return(\r\n            <header>\r\n                <img src={trollFace} alt=\"Troll Face\" />\r\n                <p>Meme Generator</p>\r\n            </header>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Header;","import React from \"react\";\r\n\r\nclass MemeGenerator extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            topTxt: \"\",\r\n            bottomTxt: \"\",\r\n            randImg: \"http://i.imgflip.com/1bij.jpg\",\r\n            allMemeImgs: []\r\n        };\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n        this.arrLength = null;\r\n        this.randomNum = null;\r\n    }\r\n\r\n    componentDidMount() {\r\n        const getData = async () => {\r\n            try {\r\n                const response = await fetch(\"https://api.imgflip.com/get_memes\");\r\n                const obj = await response.json();\r\n                const { memes } = obj.data;\r\n                this.setState({\r\n                    allMemeImgs: memes\r\n                })\r\n                this.arrLength = this.state.allMemeImgs.length - 1;\r\n            } catch(err) {\r\n                console.log(\"Error: \", err);\r\n            }\r\n        }\r\n\r\n        getData();\r\n    }\r\n\r\n    handleChange = evt => {\r\n        const { name, value } = evt.target;\r\n        this.setState({ [ name ] : value });\r\n    }\r\n\r\n    handleSubmit = evt => {\r\n        evt.preventDefault();\r\n        this.randomNum = Math.floor(Math.random()*this.arrLength);\r\n        this.setState(prev => {\r\n            return {\r\n                randImg: this.state.allMemeImgs[this.randomNum].url\r\n            }\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div>\r\n                <form className=\"meme-form\" onSubmit={this.handleSubmit}>\r\n                    <input type=\"text\" name=\"topTxt\" value={this.state.topTxt} onChange={this.handleChange} placeholder=\"Top Text\"/>\r\n                    <input type=\"text\" name=\"bottomTxt\" value={this.state.bottomTxt} onChange={this.handleChange} placeholder=\"Bottom Text\"/>\r\n                    <button>Gen</button>\r\n                </form>\r\n                <div className=\"meme\">\r\n                    {this.state.isLoading ? <p>Loading...</p> : <img src={this.state.randImg} alt=\"Random\" />}\r\n                    <h2 className=\"top\">{this.state.topTxt}</h2>\r\n                    <h2 className=\"bottom\">{this.state.bottomTxt}</h2>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default MemeGenerator;","import React from \"react\";\nimport Header from \"./components/Header\";\nimport MemeGenerator from \"./components/MemeGenerator\";\n\nfunction App() {\n    return(\n        <>\n            <Header />\n            <MemeGenerator />\n        </>\n    );\n}\n  \n  export default App;\n  ","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}